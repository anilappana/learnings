
/***************Data abstraction example**************************************/

#include <iostream>
using namespace std;
  
class implementAbstraction
{
    private:
        int a, b;
  
    public:
      
        void set(int x, int y)
        {
            a = x;
            b = y;
        }
          
        void display()
        {
            cout<<"a = " <<a << endl;
            cout<<"b = " << b << endl;
        }
};
  
int main() 
{
    implementAbstraction obj;
    obj.set(10, 20);
    obj.display();
    return 0;
}






/***************Data abstraction example**************************************/

#include <iostream>
using namespace std;

class Rectangle {
   private:

    int length;
    int breadth;

   public:

    void setLandB(int len, int brth) 
    {
      length = len;
      breadth = brth;
    }

    int getLength()
    {
      return length;
    }

    int getBreadth() 
    {
      return breadth;
    }
    
    int getArea()
    {
      return length * breadth;
    }
};

int main() {
  
  Rectangle rectangle1;

  rectangle1.setLandB(8,6);

  

  cout << "Length = " << rectangle1.getLength() << endl;

  cout << "Breadth = " << rectangle1.getBreadth() << endl;

  cout << "Area = " << rectangle1.getArea();

  return 0;
}








/*************function overloading example******************************/

int add(int a, int b){
      return a+b;
}
int add(int a, int b, int c){
      return a+b+c;
}

int main(){
    cout<<add(2,3)<<endl;
    cout<<add(2,3,4)<<endl;


     return 0;
}



/******** operator over loading **************************/


#include <iostream>
#include<string.h>
using namespace std;

class test
{
    int a;
    public:

     test()
     {
         a=0;
     }
     void operator ++()
     {
         a++;
     }
     void operator --()
     {
          a--;
     }
     void show()
     {
       cout<<" a is"<<a<<endl;
     }
};

int main()
{
    test t1;
    t1.show();
    ++t1;
    t1.show();
    --t1;
    t1.show();
}

/************************* operarator over loading example *********************



#include <iostream>
using namespace std;

class test
{
    int a;
    public:
     void get()
     {
         cin>>a;
     }
     void operator==(test t2)  // t2 is explict
     {
         if(a == t2.a)
         {
             cout<<"objects are equal"<<endl;
         }
         else
         {
             cout<<"objects are not  equal"<<endl;
         }
     }
};

main()
{
    test t1, t2;
    cout<<"enter t1 object a value"<<endl;
    t1.get();
    cout<<"enter t2 object a value"<<endl;
    t2.get();
    t1 == t2;
    return 0;

}








/***********************Consructor example ****************/

#include <iostream> 
using namespace std; 
  
class construct { 
public: 
    int a, b; 
  
    // Default Constructor 
    construct() 
    { 
        a = 10; 
        b = 20; 
    } 
}; 
  
int main() 
{ 
    // Default constructor called automatically 
    // when the object is created 
    construct c; 
    cout << "a: " << c.a << endl 
         << "b: " << c.b; 
    return 1; 
} 






/*  CPP program to illustrate parameterized constructors  */
#include <iostream> 
using namespace std; 
  
class Point { 
private: 
    int x, y; 
  
public: 
    Point(int x1, int y1) 
    { 
        x = x1; 
        y = y1; 
    } 

    Point(int x1, int y1, int z1) 
    { 
        x = x1; 
        y = y1; 
    }
  
    int getX() 
    { 
        return x; 
    } 
    int getY() 
    { 
        return y; 
    } 
}; 
  
int main() 
{ 
    Point p1(10, 15, 20); 
    cout << "p1.x = " << p1.getX() << ", p1.y = " << p1.getY(); 
    return 0; 
} 














1. what is the use of mutable keyword in c++
2. explain virual keyword in c++?
 will it be one virtual pointer and multiple or one virtual table 
3. what is this pointer?  -> what is the type of this pointer
4. where object data varibles and functions will be stored in memory segment?
5.How to restrict creating derived object?
6.what is diff beween array and vector?
6.what is differnece between capacity and max_size functions in a vector?
7.what is reference operator?
8.what is copy constructor?
9.what is shallow copy and deep copy?
9.diff between copy constructor and assignment operator?
10. what is a friend funtion and what is the use of it?
11.what is the use of private distructor?
12.what are diffrent design patterns you worked and explain them?

https://www.geeksforgeeks.org/can-access-private-data-members-class-without-using-member-friend-function/?ref=rp




16/4/2021
########################################################################  1


#include <iostream> 
using namespace std; 
/* base class */
class Parent 
{ 
    public: 
    Parent() 
    { 
        cout << "Inside base class" << endl; 
    } 
}; 
/* sub class  */
class Child : public Parent 
{ 
    public: 
     Child() 
    { 
        cout << "Inside sub class" << endl; 
    } 
}; 
  /* main function  */
int main() { 
    
    Child obj; 
    return 0; 
}

#################################################################### 2


#include <iostream> 
using namespace std; 
  
// first base class 
class Parent1 
{    
     
    public: 
      
    // first base class's Constructor     
    Parent1() 
    { 
        cout << "Inside first base class" << endl; 
    } 
}; 
  
// second base class 
class Parent2 
{ 
    public: 
      
    // second base class's Constructor 
    Parent2() 
    { 
        cout << "Inside second base class" << endl; 
    } 
}; 
  
// child class inherits Parent1 and Parent2 
class Child : public Parent1, public Parent2 
{ 
    public: 
      
    // child class's Constructor 
    Child() 
    { 
        cout << "Inside child class" << endl; 
    } 
}; 
// main function 
int main() { 
      
    // creating object of class Child 

Child obj1; 
    return 0; 
}  


 
##################################################### 3




  
#include <iostream> 
using namespace std; 
  
// base class 
class Parent 
{    
   public: 
      
    // base class's parameterized constructor     
    Parent(int i) 
    {  int x =i; 
        cout << "Inside base class's parameterized constructor" << endl; 
    } 
}; 
  
// sub class 
class Child : public Parent 
{ 
    public: 
     // sub class's parameterized constructor 
    Child(int j): Parent(j) 
    { 
        cout << "Inside sub class's parameterized constructor" << endl; 
    } 
}; 
  
// main function 
int main() { 
  
    // creating object of class Child 
    Child obj1(10); 
    return 0; 
}  









#####################################################################  4
#include<iostream>
using namespace std;

class base
{
  public:

   virtual  void print()
   {
           cout<<"print base class"<<endl;
   }
   void show()
   {

           cout<<"show base class"<<endl;
   }

};


class derived : public base
{
   public:
   void print()
   {
           cout<<"print derived class"<<endl;
   }
   void show()
   {

           cout<<"show derived  class"<<endl;
   }


};

int main()
{
  base *ptr;
  //ptr->print();
  derived  d;
  //d.print();
  ptr = &d;

  ptr->print();

}




















